generator client {  
  provider = "prisma-client-js"  
}  
  
datasource db {  
  provider = "mongodb"  
  url      = env("DATABASE_URL")  
}  

model PasswordResetToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId    
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expires   DateTime
  createdAt DateTime @default(now())
}

model User {    
  id            String    @id @default(auto()) @map("_id") @db.ObjectId    
  name          String?    
  email         String    @unique    
  password      String?    
  image         String?    
  websiteUrl    String?   // URL to the connected blog/site
  bio           String?   // User bio
  createdAt     DateTime  @default(now())    
  updatedAt     DateTime  @updatedAt    
  contents      Content[]    
  media         Media[]        
  documents     Document[]     
  events        Event[]        
  notifications Notification[]
  role          Role      @default(USER)    
  accounts      Account[]    
  sessions      Session[]    
  emailVerified DateTime?
  passwordResetTokens PasswordResetToken[]
  teamMembers   TeamMember[] 
  // New inverse relations
  comments      Comment[]
  reactions     Reaction[]
  ratings       Rating[]
  bookmarks     Bookmark[]
}    

model Content {  
  id          String   @id @default(auto()) @map("_id") @db.ObjectId 
  title       String
  description String?  
  content     String
  excerpt     String?
  coverImage  String?
  published   Boolean   @default(false)
  featured    Boolean?   @default(false)
  authorId    String   @db.ObjectId  
  author      User     @relation(fields: [authorId], references: [id])  
  tags        String[]
  seoTitle    String?
  seoDescription String?
  seoKeywords String[]
  slug        String?
  views       Int       @default(0)
  likes       Int       @default(0)
  shares      Int       @default(0)
  comments    Int       @default(0)
  readingTime Int?      // in minutes
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // New relations for richer analytics and interactions
  commentsList Comment[]
  reactions     Reaction[]
  ratings       Rating[]
  bookmarks     Bookmark[]
  analytics     AnalyticsDaily[]
}  
  
enum Role {  
  USER  
  ADMIN  
}  
  
model Account {  
  id                String  @id @default(auto()) @map("_id") @db.ObjectId  
  userId            String  @db.ObjectId  
  type              String  
  provider          String  
  providerAccountId String  
  refresh_token     String?  
  access_token      String?  
  expires_at        Int?  
  token_type        String?  
  scope             String?  
  id_token          String?  
  session_state     String?  
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)  
  
  @@unique([provider, providerAccountId])  
}  
  
model Session {  
  id           String   @id @default(auto()) @map("_id") @db.ObjectId  
  sessionToken String   @unique  
  userId       String   @db.ObjectId  
  expires      DateTime  
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)  
}  
  
model VerificationToken {  
  id         String   @id @default(auto()) @map("_id") @db.ObjectId  
  identifier String  
  token      String  
  expires    DateTime  
  
  @@unique([identifier, token])  
}  

model Media {  
  id          String   @id @default(auto()) @map("_id") @db.ObjectId  
  title       String  
  type        String   // image, video, document  
  url         String  
  thumbnail   String?  
  size        Int  
  format      String  
  width       Int?     // Image/video width
  height      Int?     // Image/video height
  createdAt   DateTime @default(now())  
  updatedAt   DateTime @updatedAt  
  userId      String   @db.ObjectId  
  user        User     @relation(fields: [userId], references: [id])  
}  

model Document {  
  id          String   @id @default(auto()) @map("_id") @db.ObjectId  
  title       String  
  content     String  
  type        String   // doc, pdf, sheet  
  status      String   @default("draft")  
  createdAt   DateTime @default(now())  
  updatedAt   DateTime @updatedAt  
  userId      String   @db.ObjectId  
  user        User     @relation(fields: [userId], references: [id])  
}  

model Event {  
  id          String   @id @default(auto()) @map("_id") @db.ObjectId  
  title       String  
  description String?  
  startDate   DateTime  
  endDate     DateTime  
  allDay      Boolean  @default(false)  
  color       String   @default("#4F46E5")  
  userId      String   @db.ObjectId  
  user        User     @relation(fields: [userId], references: [id])  
  createdAt   DateTime @default(now())  
  updatedAt   DateTime @updatedAt  
}  

enum TeamRole {  
  MEMBER  
  ADMIN  
  OWNER  
}  

model Team {  
  id          String       @id @default(auto()) @map("_id") @db.ObjectId  
  name        String  
  description String?  
  createdAt   DateTime     @default(now())  
  updatedAt   DateTime     @updatedAt  
  members     TeamMember[]  
}  

model TeamMember {  
  id        String    @id @default(auto()) @map("_id") @db.ObjectId  
  teamId    String    @db.ObjectId  
  userId    String    @db.ObjectId  
  role      TeamRole  @default(MEMBER)  
  joinedAt  DateTime  @default(now())  
  team      Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)  
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)  

  @@unique([teamId, userId])  
}  

model Notification {  
  id          String   @id @default(auto()) @map("_id") @db.ObjectId  
  type        String   // like, comment, share, view, system, team, content
  title       String  
  message     String  
  isRead      Boolean  @default(false)  
  data        Json?    // Additional data for the notification
  userId      String   @db.ObjectId  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)  
  createdAt   DateTime @default(now())  
  updatedAt   DateTime @updatedAt  
}

// New models for comments, reactions, ratings, bookmarks, and daily analytics

enum ReactionType {
  UPVOTE
  DOWNVOTE
  FAVORITE
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  text      String
  contentId String   @db.ObjectId
  content   Content  @relation(fields: [contentId], references: [id])
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  parentId  String?  @db.ObjectId
  parent    Comment? @relation("CommentToReplies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Comment[] @relation("CommentToReplies")
  createdAt DateTime @default(now())

  @@index([contentId])
  @@index([userId])
}

model Reaction {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  type      ReactionType
  contentId String       @db.ObjectId
  content   Content      @relation(fields: [contentId], references: [id])
  userId    String       @db.ObjectId
  user      User         @relation(fields: [userId], references: [id])
  createdAt DateTime     @default(now())

  @@unique([contentId, userId, type])
  @@index([contentId, type])
  @@index([userId, type])
}

model Rating {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  value     Int      // 1..5
  contentId String   @db.ObjectId
  content   Content  @relation(fields: [contentId], references: [id])
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([contentId, userId])
  @@index([contentId])
  @@index([userId])
}

model Bookmark {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  contentId String   @db.ObjectId
  content   Content  @relation(fields: [contentId], references: [id])
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())

  @@unique([contentId, userId])
  @@index([contentId])
  @@index([userId])
}

model AnalyticsDaily {
  id                   String   @id @default(auto()) @map("_id") @db.ObjectId
  contentId            String   @db.ObjectId
  content              Content  @relation(fields: [contentId], references: [id])
  day                  DateTime // UTC midnight for the day
  views                Int      @default(0)
  uniqueUsers          Int      @default(0)
  upvotes              Int      @default(0)
  downvotes            Int      @default(0)
  bookmarks            Int      @default(0)
  favorites            Int      @default(0)
  totalTimeMs          Int      @default(0) // running sum for avg
  timeSamples          Int      @default(0)
  p50TimeMs            Int?
  p90TimeMs            Int?
  tagsSnapshot         String[]
  recentNextContentIds String[]
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  @@unique([contentId, day])
  @@index([day])
}